version: 2.1

######################
# Common Definitions #
######################
parameters:
  main:
    description: Run primary workflow that spins up minikube/k8s
    type: boolean
    default: true
  teardown:
    description: Run a teardown workflow to destroy the cluster
    type: boolean
    default: false
  test:
    description: Run the workflow requesting runner jobs
    type: boolean
    default: false
  git-sha:
    description: Original git sha to tear down
    type: string
    default: ""

orbs:
  eks: circleci/aws-eks@1.0.3

executors:
  base:
    docker:
      - image: cimg/base:2021.04
  runner:
    machine: true
    resource_class: circleci/k8s-test

########################
# Workflow Definitions #
########################
workflows:
  main:
    when: << pipeline.parameters.main >>
    jobs:
      - eks/create-cluster:
          name: create-cluster-<< pipeline.git.revision >>
          cluster-name: runner-k8s-test-<< pipeline.git.revision >>
          context: custeng-aws
          filters:
            branches:
              only: main
      - eks/install-helm-on-cluster:
          name: install-helm-on-cluster-<< pipeline.git.revision >>
          cluster-name: runner-k8s-test-<< pipeline.git.revision >>
          enable-cluster-wide-admin-access: true
          context: custeng-aws
          requires:
            - create-cluster-<< pipeline.git.revision >>
      - eks/install-helm-chart:
          name: install-runners-<< pipeline.git.revision >>
          chart: .
          cluster-name: runner-k8s-test-<< pipeline.git.revision >>
          release-name: << pipeline.git.revision >>
          values-to-override: "runnerToken=$K8S_RUNNER_TOKEN,resourceClass=$K8S_RUNNER_RESOURCE"
          context: custeng-aws
          requires:
            - install-helm-on-cluster-<< pipeline.git.revision >>
      - approve-test:
          type: approval
          requires:
            - install-runners-<< pipeline.git.revision >>
      - test-and-teardown:
          name: test-runners-<< pipeline.git.revision >>
          context:
            - circle-api
          requires:
            - approve-test

  teardown:
    when: << pipeline.parameters.teardown >>
    jobs:
      - eks/delete-helm-release:
          name: uninstall-runners-<< pipeline.parameters.git-sha >>
          cluster-name: runner-k8s-test-<< pipeline.parameters.git-sha >>
          release-name: << pipeline.parameters.git-sha >>
          context: custeng-aws
      - eks/delete-cluster:
          name: delete-cluster-<< pipeline.parameters.git-sha >>
          cluster-name: runner-k8s-test-<< pipeline.parameters.git-sha >>
          context: custeng-aws
          requires:
            - uninstall-runners-<< pipeline.parameters.git-sha >>

  test:
    when: << pipeline.parameters.test >>
    jobs:
      - runner_job

###################
# Job Definitions #
###################
jobs:
  test-and-teardown:
    executor: base
    steps:
      - run:
          name: Trigger a pipeline
          command: |
            curl -u ${CIRCLE_TOKEN}: -X POST https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              -d '{"branch": "'"${CIRCLE_BRANCH}"'", "parameters": {"main": false, "teardown": false, "test": true}}' > runner-pipeline.json
            cat runner-pipeline.json

      - run:
          name: Poll pipeline's workflow, check its status every 5s
          command: |-
            pipeline_id=$(cat runner-pipeline.json | jq -r '.id')

            while true; do
              curl -u ${CIRCLE_TOKEN}: -X POST https://circleci.com/api/v2/pipeline/${pipeline_id}/workflow \
                -H 'Content-Type: application/json' \
                -H 'Accept: application/json' > runner-workflows.json \
              cat runner-workflows.json
              status=$(cat runner-workflows.json | jq -r '.items[0].status')

              if [[ "$status" == "running" ]]; then
                echo "Still running..."
                sleep 5
              else
                if [[ "$status" == "success" ]]; then
                  echo "Runner job succeeded" && exit 0
                elif [[ "$status" =~ failed|failing|error|canceled ]]; then
                  echo "Runner job failed" && exit 1
                fi
              fi
            done
      - run:
          name: Call the cleanup workflow
          command: |
            curl -u ${CIRCLE_TOKEN}: -X POST https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              -d '{"branch": "'"${CIRCLE_BRANCH}"'", "parameters": {"main": false, "teardown": true, "test": false}}'

  runner_job:
    executor: runner
    steps:
      - run: 
          name: Verify environment
          command: |
            echo "Executing runner in a k8s cluster"
            echo "Kubernetes Service Host: $KUBERNETES_SERVICE_HOST"
            echo "Kubernetes Service Port: $KUBERNETES_SERVICE_PORT"
            printenv

